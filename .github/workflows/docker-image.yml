name: Docker Image CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Branch
        run: echo "${{github.ref}}"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Environment variables
        run: |-
          if [[ "${{github.ref}}" == "refs/heads/main" ]]; then
          echo "name=apoorv" >> "$GITHUB_ENV"
          fi
          if [[ "${{github.ref}}" == "refs/heads/dev" ]]; then
          echo "name=sharma" >> "$GITHUB_ENV"
          fi

      - name: Docker Login
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build the Docker image
        run: |-
          docker build \
            --tag apoorvkumarsharma/docker_v1 \
            --build-arg NEXT_PUBLIC_TEST_VAR="$name" \
            .

      - name: Publish the docker image
        run: docker push apoorvkumarsharma/docker_v1

      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition > task-definition.json
      - name: fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          # image: ${{ steps.build-image.outputs.image }}
      - name: deploy Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
